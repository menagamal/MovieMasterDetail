//
//  DetailPresenter.swift
//  MovieMasterDetail
//
//  Created Mena Gamal on 6/25/20.
//  Copyright Â© 2020 Mena Gamal. All rights reserved.
//
//  Template generated by Mena Gamal
//

import UIKit
import Cosmos
class DetailPresenter: DetailPresenterUseCases {
     
    private var interactor:DetailInteractor?
    private var router:DetailRouter?
    
    //MARK: TO AVOID RETAIN CYCLE
    private weak var view:DetailView?
    
    
    //MARK: Attributes
    private var dataSource:PhotoCollectionViewCellDataSource?
    
    
    init(interactor:DetailInteractor,router:DetailRouter,view:DetailView) {
        self.interactor = interactor
        self.router = router
        self.view = view
    }
    
    
    func loadDetails() {
        interactor?.loadMovie()
    }
    func loadPhotos()  {
        interactor?.loadMoviePhotos()
    }
    
}

extension DetailPresenter :DetailPresenterDelegate{
    func imagesUrl(with urls: [NSURL]) {
        var photosUrls = urls
        if !photosUrls.isEmpty {
            let first = photosUrls.first!
            self.view?.mainImageView!.sd_setImage(with: first as URL?, completed: { (img, e, s, u) in

            })
            photosUrls.removeFirst()
            dataSource = PhotoCollectionViewCellDataSource(collection: self.view!.photosCollection, urls: photosUrls)
        }
    }
    
    func failedToLoad(message: String) {
        
    }
    func presentMovie(with movie: Movie) {
        self.view?.labelTitle.text = movie.title!
        var cast = ""
        var geners = ""
        for item in movie.cast! {
            cast = cast + " \(item)"
        }
        for item in movie.genres! {
            geners = geners + " \(item)"
        }
        self.view?.labelCast.text = cast
        self.view?.labelYear.text = "\(movie.year!)"
        self.view?.labelGeners.text = geners
        self.view?.ratingView.rating = Double(movie.rating!)
    }
}
protocol DetailPresenterDelegate {
    func presentMovie(with movie:Movie)
    func imagesUrl(with urls:[NSURL])
    func failedToLoad(message:String)
}

protocol DetailPresenterUseCases {
    func loadDetails()
}
