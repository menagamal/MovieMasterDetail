//
//  DetailInteractor.swift
//  MovieMasterDetail
//
//  Created Mena Gamal on 6/25/20.
//  Copyright Â© 2020 Mena Gamal. All rights reserved.
//
//  Template generated by Mena Gamal
//

import Foundation
import Moya
import Reachability
protocol DetailUseCase {
    func loadMovie()
    func loadMoviePhotos()
    func photoUrlBuilder( photo: Photo)
    func cacheImage(index:Int,base64: String)
}

class DetailInteractor: DetailUseCase {
    
    
    private var movie:Movie?
    var presenter:DetailPresenterDelegate?
    private var provider = MoyaProvider<DetailTarget>(callbackQueue: DispatchQueue.global(qos: .utility))
    
    
    init(movie:Movie) {
        self.movie = movie
        
    }
    
    
    func loadMovie()  {
        // If there is any logic done on the object before passing it to the presenter
        presenter?.presentMovie(with: movie ?? Movie())
    }
    
    func loadMoviePhotos() {
        let reachability = try? Reachability()
        if reachability!.connection != .unavailable {
            provider.request(.getMoviePhotos(movei: movie!)) { result in
                switch(result) {
                case .success(let response):
                    DispatchQueue.main.async {
                        do {
                            if response.statusCode == AppConstant.API.Codes.success.rawValue {
                                
                                let responseModel: PhotoApiResponse = try response.map(PhotoApiResponse.self)
                                
                                if responseModel.photos?.photo?.isEmpty ?? false {
                                    self.movie?.shouldShow = false
                                    CacheHandler.shared.updateMovie(with: self.movie!)
                                    self.presenter?.failedToLoad(message: DetailConstant.DetailError.NoPhotos.localizedDescription)
                                }
                                
                                for item in (responseModel.photos?.photo)! {
                                    self.photoUrlBuilder(photo: item)
                                }
                                
                                self.movie?.photoResponse = responseModel.photos
                                CacheHandler.shared.updateMovie(with: self.movie!)
                                self.presenter?.moviesImages(with: responseModel.photos!.photo!)
                            } else {
                                self.presenter?.failedToLoad(message: DetailConstant.DetailError.InvalidURL.localizedDescription)
                            }
                        } catch{
                            self.presenter?.failedToLoad(message: DetailConstant.DetailError.ParsingError.localizedDescription)
                        }
                    }
                case .failure(let error):
                    DispatchQueue.main.async {
                        self.presenter?.failedToLoad(message: error.localizedDescription)
                    }
                }
            }
        } else {
            self.presenter?.moviesImages(with: self.movie?.photoResponse?.photo ?? [Photo]())
        }
        
    }
    
    func photoUrlBuilder(photo: Photo) {
        let farm = Int(photo.farm!)
        let server = Int(photo.server!)!
        let id = Int(photo.id!)!
        let secret = photo.secret!
        
        
        photo.url = NSURL(string: "https://farm\(farm).staticflickr.com/\(server)/\(id)_\(secret)_m.jpg")!
    }
    
    func cacheImage(index:Int,base64: String){
        if (self.movie?.photoResponse?.photo?.indices.contains(index))! {
            self.movie?.photoResponse?.photo?[index].base64 = base64
        }
        CacheHandler.shared.updateMovie(with: self.movie!)
    }
    
}
